#include<iostream>
#include<cmath>
using namespace std;

class Complex{
private:
    double real;
    double imaginary;

public:
    Complex(double realNum = 0, double imaginaryNum = 0) : real(realNum), imaginary(imaginaryNum) {}

    Complex operator+(const Complex& c) 
    {
        return Complex(real + c.real, imaginary + c.imaginary);
    }

    Complex operator-(const Complex& c) 
    {
        return Complex(real - c.real, imaginary - c.imaginary);
    }

    Complex operator*(const Complex& c) 
    {
        return Complex(real * c.real - imaginary * c.imaginary, real * c.imaginary + imaginary * c.real);
    }

    Complex operator/(const Complex& c) 
    {
        double denominator = pow(c.real, 2) + pow(c.imaginary, 2);
        
        return Complex((real * c.real + imaginary * c.imaginary) / denominator, (imaginary * c.real - real * c.imaginary) / denominator);
    }

    friend double magnitude(const Complex& c);

    friend ostream& operator<<(ostream& output, const Complex& c) 
    {
        output << "(" << c.real << (c.imaginary >= 0 ? " + " : " - ") << fabs(c.imag) << "i)";
        return os;
    }
};

double magnitude(const Complex& c) {
    return sqrt(c.real * c.real + c.imag * c.imag);
}

int main() {
    Complex c1(8, -3);
    Complex c2(-2, 5);

    cout << "c1: " << c1 << endl;
    cout << "c2: " << c2 << endl;

    cout << "Addition: " << c1 + c2 << endl;
    cout << "Subtraction: " << c1 - c2 << endl;
    cout << "Multiplication: " << c1 * c2 << endl;
    cout << "Division: " << c1 / c2 << endl;
    cout << "Magnitude of c1: " << magnitude(c1) << endl;

    return 0;
}

int main() {


    return 0;
}
